<script>
  (function () {
    if (typeof window.aaron == "undefined")
      window.aaron = new Object();
    if (typeof window.aaron.collection == "undefined")
      window.aaron.collection = new Object();
    if (typeof window.aaron.collection.grid == "undefined")
      window.aaron.collection.grid = new Object();
    window.aaron.collection.grid.elementsGeneratedFlag = false;
    window.aaron.collection.grid.products = [];
    window.aaron.collection.grid.variants = [];
  })();

  let enableFor = '{{ block.settings.enablefor }}';
  if (((deviceType == "pc" || deviceType == "tablet") && enableFor == "pc")
      || (deviceType == "phone" && enableFor == "phone")
      || (enableFor == "both")) {
    window.aaron.collection.grid.ActivationFunction = function () {
      (function () {
        //Load products into js from shopify's dumbass liquid
        let curVariantID = -1; //Define here so isn't redefined in Liquid loop.
        {% paginate block.settings.collections by 50 %}
          {% for collection in block.settings.collections %}
            {% paginate collection.products by 50 %}
              {% for product in collection.products %}
                window.aaron.collection.grid.products.push({{ product | json }});
                {% paginate variant in product.variants by 50 %}
                  {% for variant in product.variants %}
                    curVariantID = '{{ variant.id }}';
                    for (let varInd = 0; varInd < window.aaron.collection.grid.products[window.aaron.collection.grid.products.length-1].variants.length; varInd++) {
                      let checkVariant = window.aaron.collection.grid.products[window.aaron.collection.grid.products.length-1].variants[varInd];
                      if (checkVariant.id == curVariantID) {
                        window.aaron.collection.grid.products[window.aaron.collection.grid.products.length-1].variants[varInd].inventory_quantity = {{ variant.inventory_quantity }};
                      }
                    }
                  {% endfor %}
                {% endpaginate %}
              {% endfor %}
            {% endpaginate %}
          {% endfor %}
        {% endpaginate %}
  
        //Handle adding single or all variants
        {% if block.settings.showallcolorvariants %}
          for (let product of window.aaron.collection.grid.products) {
            let colorsFoundArray = [];
            let colorOptionIndex = -1;
            for (let i = 0;i < product.options.length;i++) {
              if (product.options[i].toLowerCase().includes("color")) {
                colorOptionIndex = i;
                i = product.options.length;
              }
            }
            for (let variant of product.variants) {
              if (!colorsFoundArray.includes(variant.options[colorOptionIndex])) {
                variant.parentProduct = product;
                for (let i = 0;i < 4;i++)
                  window.aaron.collection.grid.variants.push(variant);
                colorsFoundArray.push(variant.options[colorOptionIndex]);
              }
            }
          }
        {% endif %}
      })();
    
      window.aaron.collection.grid.UpdateGridSizings = function (productgrid, backplateimg) {
        productgrid.style.display = "grid";
        let productsperrow, columngap, rowgap;
        if (deviceType == "pc" || deviceType == "tablet") {
          productsperrow = productgrid.dataset.pcproductsperrow;
          columngap = productgrid.dataset.pccolumngap;
          rowgap = productgrid.dataset.pcrowgap;
        } else if (deviceType == "phone") {
          productsperrow = productgrid.dataset.phoneproductsperrow;
          columngap = productgrid.dataset.phonecolumngap;
          rowgap = productgrid.dataset.phonerowgap;
        }

        let columnGapCalc = (deviceType == "pc" || deviceType == "tablet") ? (vw*productgrid.dataset.pccolumngap/100) : (vw*productgrid.dataset.phonecolumngap/100);
        let productsPerRowCalc = (deviceType == "pc" || deviceType == "tablet") ? productgrid.dataset.pcproductsperrow : productgrid.dataset.phoneproductsperrow;
        let width = (parseInt(productgrid.style.width) - columnGapCalc*(productsPerRowCalc-1)) / productsPerRowCalc;
        let useVariants = window.aaron.collection.grid.variants.length == 0 ? false : true;
        let arrayToUse = !useVariants ? window.aaron.collection.grid.products : window.aaron.collection.grid.variants;
        productgrid.style.gridTemplateColumns = "repeat(" + productsperrow + ", " + width + "px)";
        productgrid.style.gridTemplateRows = "repeat(" + Math.ceil(arrayToUse.length / productsperrow) + ", " + (width * (backplateimg.naturalHeight/backplateimg.naturalWidth)) + "px)";
        productgrid.style.columnGap = (vw * (columngap/100)) + "px";
        productgrid.style.rowGap = (vh * (rowgap/100)) + "px";
      };
      
      (function () {
        if (!window.aaron.collection.grid.elementsGeneratedFlag) { 
          window.aaron.collection.grid.elementsGeneratedFlag = true;
          let root = document.getElementById("root");
          let productgrid = document.createElement("div");
          productgrid.id = '{{ block.settings.scrollid }}';
          productgrid.classList.add("productgrid");
          productgrid.style.position = "absolute";
          productgrid.style.transform = "translate(-50%,-50%)";
          productgrid.style.overflow = "hidden";
          productgrid.style.zIndex = {{ block.settings.zindex }};
          productgrid.dataset.backplateimg='{{ block.settings.backplateimg | image_url: width: 512 }}';
          productgrid.dataset.anchor='{{ block.settings.anchor }}';
          productgrid.dataset.pcsizingmode='{{ block.settings.pcsizingmode }}';
          productgrid.dataset.pcsizewidth='{{ block.settings.pcsizewidth }}';
          productgrid.dataset.pcsizeheight='{{ block.settings.pcsizeheight }}';
          productgrid.dataset.pcx='{{ block.settings.pcx }}';
          productgrid.dataset.pcy='{{ block.settings.pcy }}';
          productgrid.dataset.pcproductsperrow='{{ block.settings.pcproductsperrow }}';
          productgrid.dataset.pcproductwidth='{{ block.settings.pcproductwidth }}';
          productgrid.dataset.pccolumngap='{{ block.settings.pccolumngap }}';
          productgrid.dataset.pcrowgap='{{ block.settings.pcrowgap }}';
          productgrid.dataset.phonesizingmode='{{ block.settings.phonesizingmode }}';
          productgrid.dataset.phonesizewidth='{{ block.settings.phonesizewidth }}';
          productgrid.dataset.phonesizeheight='{{ block.settings.phonesizeheight }}';
          productgrid.dataset.phonex='{{ block.settings.phonex }}';
          productgrid.dataset.phoney='{{ block.settings.phoney }}';
          productgrid.dataset.phoneproductsperrow='{{ block.settings.phoneproductsperrow }}';
          productgrid.dataset.phoneproductwidth='{{ block.settings.phoneproductwidth }}';
          productgrid.dataset.phonecolumngap='{{ block.settings.phonecolumngap }}';
          productgrid.dataset.phonerowgap='{{ block.settings.phonerowgap }}';
          
          // //Define functions
          // productgrid.onwheel = function (event) {
          //   if (event.deltaY == 0)
          //     return;
    
          //   let delta = event.deltaY > 0 ? 100 : -100;
          //   productgrid.scroll({
          //     top: productgrid.scrollTop + delta,
          //     left: 0,
          //     behavior: 'smooth'
          //   });
          // };
          // let touchY = 0;
          // let startScroll = 0;
          // productgrid.ontouchstart = function (event) {
          //   touchY = event.touches[0].pageY;
          //   startScroll = productgrid.scrollTop;
          // }
          // productgrid.ontouchmove = function (event) {
          //   deltaY = - (event.touches[0].pageY - touchY);
          //   productgrid.scroll({
          //     top: startScroll + deltaY,
          //     left: 0,
          //     behavior: 'instant'
          //   });
          // }

          //Resizings
          let backplateimgDummyForRatio = document.createElement("img");
          backplateimgDummyForRatio.src = productgrid.dataset.backplateimg;
          function resizeImage () {
            window.aaron.common.sizing.DefaultSetSize(productgrid, null, false);
            window.aaron.collection.grid.UpdateGridSizings(productgrid, backplateimgDummyForRatio);
          }
          resizeImage();
          window.aaron.common.sizing.resizeFunctions.push(resizeImage);
          root.appendChild(productgrid);

          //Handle mask
          let pcmask = '{{ block.settings.pcmaskimg | image_url: width: 512 }}';
          let phonemask = '{{ block.settings.phonemaskimg | image_url: width: 512 }}';
          if ((deviceType == "pc" || deviceType == "tablet") && pcmask != "") {
            productgrid.style.maskImage = "url(" + pcmask + ")";
            productgrid.style.maskSize = "100% 100%";
            productgrid.style.paddingTop = (parseInt(productgrid.style.height) * {{ block.settings.pcmasktopgap }} / 100) + "px";
            productgrid.style.paddingBottom = (parseInt(productgrid.style.height) * {{ block.settings.pcmaskbottomgap }} / 100) + "px";
          } else if (deviceType == "phone" && phonemask != "") {
            productgrid.style.maskImage = "url(" + phonemask + ")";
            productgrid.style.maskSize = "100% 100%";
            productgrid.style.paddingTop = (parseInt(productgrid.style.height) * {{ block.settings.phonemasktopgap }} / 100) + "px";
            productgrid.style.paddingBottom = (parseInt(productgrid.style.height) * {{ block.settings.phonemaskbottomgap }} / 100) + "px";
          }
          
          //Grid + component setup
          let columnGapCalc = (deviceType == "pc" || deviceType == "tablet") ? (vw*productgrid.dataset.pccolumngap/100) : (vw*productgrid.dataset.phonecolumngap/100);
          let productsPerRowCalc = (deviceType == "pc" || deviceType == "tablet") ? productgrid.dataset.pcproductsperrow : productgrid.dataset.phoneproductsperrow;
          let productWidthCalc = (deviceType == "pc" || deviceType == "tablet") ? productgrid.dataset.pcproductwidth : productgrid.dataset.phoneproductwidth;
          let width = (parseInt(productgrid.style.width) - columnGapCalc*(productsPerRowCalc-1)) / productsPerRowCalc;
          let useVariants = window.aaron.collection.grid.variants.length == 0 ? false : true;
          let arrayToUse = !useVariants ? window.aaron.collection.grid.products : window.aaron.collection.grid.variants;
          for (let i = 0;i < arrayToUse.length;i++) {
            let variant = !useVariants ? null : arrayToUse[i];
            let product = !useVariants ? arrayToUse[i] : variant.parentProduct;
            
            let div = document.createElement("div");
            div.style.width = width + "px";
            div.style.height = width + "px";
            productgrid.appendChild(div);
    
            let backplateimg = document.createElement("img");
            backplateimg.style.position = "absolute";
            backplateimg.src = productgrid.dataset.backplateimg;
            backplateimg.style.width = width + "px";
            backplateimg.style.height = "auto";
            backplateimg.ondragstart = ()=>{return false;};
            backplateimg.onload = resizeImage;
            div.appendChild(backplateimg);
    
            let a = document.createElement("a");
            if (!useVariants)
              a.href = "/products/" + product.handle + "?variant=" + product.variants[0].id;
            else
              a.href = "/products/" + product.handle + "?variant=" + variant.id;
            div.appendChild(a);

            let editURL = function (url, width) {
              if (url.includes("?")) {
                  return url + "&width=" + width;
              } else {
                  return url + "?width=" + width;
              }
            }
            let productimg = document.createElement("img");
            productimg.classList.add("collectiongridimg");
            productimg.style.position = "relative";
            productimg.style.left = (width/2) + "px";
            productimg.style.top = (width/2) + "px";
            productimg.style.transform = "translate(-50%,-50%)";
            productimg.style.width = (width * productWidthCalc/100) + "px";
            productimg.style.height = "auto";
            productimg.src = "https://imgur.com/e7GGFtS.png";
            productimg.dataset.srcgif = editURL(product.images[product.images.length - 2], deviceType == "pc" || deviceType == "tablet" ? 512 : 256);
            if (!useVariants)
              productimg.dataset.srcstatic = editURL(product.images[0], deviceType == "pc" || deviceType == "tablet" ? 512 : 256);
            else
              productimg.dataset.srcstatic = editURL(variant.featured_image.src, deviceType == "pc" || deviceType == "tablet" ? 512 : 256);
            //Handle if toggles loads first
            if (window.aaron.common != null && window.aaron.common.toggles != null && window.aaron.common.toggles.togglegridgifon != null) {
              if (window.aaron.common.toggles.togglegridgifon === "true") {
                productimg.dataset.srcactive = productimg.dataset.srcgif;
              } else {
                productimg.dataset.srcactive = productimg.dataset.srcstatic;
              }
            }
            //Handle if collection grid loads first
            else {
              productimg.dataset.srcactive = productimg.dataset.srcgif;
            }
            a.appendChild(productimg);

            let checkSetSrc = function () {
              let measure = productgrid.getBoundingClientRect();
              let top = measure.top;
              let bottom = measure.top + measure.height;
              let pos = div.getBoundingClientRect();
              if (pos.top >= top && pos.top <= bottom) {
                productimg.src = productimg.dataset.srcactive;
                productgrid.removeEventListener('scroll', checkSetSrc);
              }
            };
            checkSetSrc();
            let measure = productgrid.getBoundingClientRect();
            let top = measure.top;
            let bottom = measure.top + measure.height;
            let pos = div.getBoundingClientRect();
            if (!(pos.top >= top && pos.top <= bottom)) {
              productgrid.addEventListener('scroll', checkSetSrc);
            }
          }
    
          function resizeComponents () {
            let columnGapCalc = (deviceType == "pc" || deviceType == "tablet") ? (vw*productgrid.dataset.pccolumngap/100) : (vw*productgrid.dataset.phonecolumngap/100);
            let productsPerRowCalc = (deviceType == "pc" || deviceType == "tablet") ? productgrid.dataset.pcproductsperrow : productgrid.dataset.phoneproductsperrow;
            let productWidthCalc = (deviceType == "pc" || deviceType == "tablet") ? productgrid.dataset.pcproductwidth : productgrid.dataset.phoneproductwidth;
            let width = (parseInt(productgrid.style.width) - columnGapCalc*(productsPerRowCalc-1)) / productsPerRowCalc;
            for (let div of productgrid.childNodes) {
              let backplateimg = div.childNodes[0];
              let a = div.childNodes[1];
              let productimg = a.childNodes[0];
    
              div.style.width = width + "px";
              div.style.height = width + "px";
              backplateimg.style.width = width + "px";
              productimg.style.left = (width/2) + "px";
              productimg.style.top = (width/2) + "px";
              productimg.style.width = (width * productWidthCalc/100) + "px";
            }
            //Handle common.scrollbar if applicable
            if (window != null && window.aaron != null && window.aaron.common != null && window.aaron.common.scrollbar != null && window.aaron.common.scrollbar.resizefuncs != null) {
              let scrollID = '{{ block.settings.scrollid }}';
              if (typeof window.aaron.common.scrollbar.resizefuncs[scrollID] != "undefined") {
                window.aaron.common.scrollbar.resizefuncs[scrollID]();
              }
            }
          }
          window.aaron.common.sizing.resizeFunctions.push(resizeComponents);

          if (window != null && window.aaron != null && window.aaron.common != null && window.aaron.common.scrollbar != null && window.aaron.common.scrollbar.pending != null) {
            let scrollID = '{{ block.settings.scrollid }}';
            if (typeof window.aaron.common.scrollbar.pending[scrollID] != "undefined") {
              window.aaron.common.scrollbar.pending[scrollID]();
              delete window.aaron.common.scrollbar.pending[scrollID];
            }
          }
        }
      })();
    };
    window.aaron.common.modulebasics.ActivateFuncs.push(window.aaron.collection.grid.ActivationFunction);
  }
  delete enableFor;
</script>